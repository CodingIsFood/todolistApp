{"version":3,"sources":["components/Todo.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","react_default","a","createElement","style","textDecoration","todo","isCompleted","text","onClick","completeTodo","index","deleteTodo","TodoForm","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","addTodo","type","onChange","target","placeholder","App","todos","setTodos","newTodos","toConsumableArray","splice","className","map","components_Todo","key","components_TodoForm","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAceA,EAZF,SAACC,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,eAAgBL,EAAMM,KAAKC,YAAc,eAAiB,KACpEP,EAAMM,KAAKE,KACZP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIT,EAAMU,aAAaV,EAAMW,SAA9C,YACAV,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAIT,EAAMY,WAAWZ,EAAMW,SAA5C,aCkBOE,EAxBE,SAACb,GAAU,IAAAc,EACAC,mBAAS,IADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACZI,EADYJ,EAAA,GAU1B,OACEf,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMkB,SATY,SAAAC,GAClBA,EAAEC,iBACGJ,IACLnB,EAAMwB,QAAQL,GACdC,EAAS,OAMPnB,EAAAC,EAAAC,cAAA,SACEsB,KAAK,OACLN,MAAOA,EACPO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,QACjCS,YAAY,gBCsCLC,EApDH,WAAM,IAAAf,EACUC,mBAAS,CACjC,CACEP,KAAM,0BACND,aAAa,GAEf,CACEC,KAAM,oBACND,aAAa,GAEf,CACEC,KAAM,0BACND,aAAa,KAZDS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTgB,EADSd,EAAA,GACFe,EADEf,EAAA,GAqBZN,EAAa,SAACC,GAClB,IAAMqB,EAAQf,OAAAgB,EAAA,EAAAhB,CAAOa,GACrBE,EAASrB,GAAOJ,aAAY,EAC5BwB,EAASC,IAGLpB,EAAW,SAACD,GAChB,IAAMqB,EAAQf,OAAAgB,EAAA,EAAAhB,CAAOa,GACrBE,EAASE,OAAOvB,EAAO,GAEvBoB,EAASC,IAGT,OACE/B,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,aACZL,EAAMM,IAAI,SAAC9B,EAAMK,GAAP,OACTV,EAAAC,EAAAC,cAACkC,EAAD,CACEC,IAAK3B,EACLA,MAAOA,EACPL,KAAMA,EACNI,aAAcA,EACdE,WAAYA,MAGhBX,EAAAC,EAAAC,cAACoC,EAAD,CAAUf,QA9BF,SAAAhB,GACd,IAAMwB,EAAQ,GAAAQ,OAAAvB,OAAAgB,EAAA,EAAAhB,CAAOa,GAAP,CAAc,CAACtB,UAC7BuB,EAASC,SCXSS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dfa08dad.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Todo = (props) => {\n  return (\n    <div style={{textDecoration: props.todo.isCompleted ? 'line-through' : ''}}>\n      {props.todo.text}\n      <div>\n        <button onClick={()=>props.completeTodo(props.index)}>complete</button>\n        <button onClick={()=>props.deleteTodo(props.index)}>delete</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Todo;\n","import React, { useState } from 'react';\n\nconst TodoForm = (props) => {\n  const [value, setValue] = useState('')\n\n  const handleSubmit= e => {\n    e.preventDefault();\n    if (!value){return}\n    props.addTodo(value)\n    setValue('');\n  }\n\n  return (\n    <div>\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n        placeholder=\"add todo\"\n        />\n    </form>\n    </div>\n  )\n}\n\nexport default TodoForm;\n","import React, { useState } from 'react';\nimport Todo from './components/Todo.js';\nimport TodoForm from './components/TodoForm.js';\n\n\nconst App = () => {\n  const [todos, setTodos] = useState([\n    {\n      text: \"learn about react hooks\",\n      isCompleted: false\n    },\n    {\n      text: \"learn about redux\",\n      isCompleted: false\n    },\n    {\n      text: \"learn about context api\",\n      isCompleted: false\n    }\n  ]);\n\nconst addTodo = text => {\n  const newTodos = [...todos, {text}];\n  setTodos(newTodos);\n}\n\nconst completeTodo=(index)=>{\n  const newTodos = [...todos];\n  newTodos[index].isCompleted=true;\n  setTodos(newTodos);\n}\n\nconst deleteTodo=(index)=>{\n  const newTodos = [...todos];\n  newTodos.splice(index, 1);\n  //newTodos[index]=''; works but not as i want it\n  setTodos(newTodos);\n}\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTodo={completeTodo}\n            deleteTodo={deleteTodo}\n            />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}